# -*- coding: utf-8 -*-
"""Actividad_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wATy11EWGpz8LfDng_l1hnqnpI8ppnyn

# Parte 1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
from sklearn.model_selection import  train_test_split

#Obteniendo los datos del dataframe
df = pd.read_csv('df_regresion_nolineal_3.cvs')
#print(df)

x = np.asanyarray(df[['x']])
y = np.asanyarray(df[['y']])

#Seleccionamos los datos de entrenamiento y generalizacion
x_train, x_test, y_train, y_test = train_test_split(x,y)

#Modelo
model = Pipeline([('P',PolynomialFeatures(degree=3)),('S',StandardScaler()),('R',LinearRegression())])

model.fit(x_train,y_train)

print('Train Score = ', model.score(x_train, y_train))
print('Test Score = ', model.score(x_test, y_test))

#Prediccion

xx = np.linspace(x.min(),x.max(),50).reshape(-1,1)
yy = model.predict(xx)

#Graficando
plt.figure()
plt.grid()
plt.title('Regresion No Lineal')
plt.xlabel('X')
plt.ylabel('Y')

plt.plot(x_train, y_train, 'bo')
plt.plot(x_test, y_test, 'ro')
plt.plot(xx, yy, 'y-', lw = 2)
plt.legend(['Dato de entrenamiento','Dato de generalizacion','Predicción'])

plt.show()

"""# Parte 2"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.pipeline import Pipeline
from sklearn.model_selection import  train_test_split

#Obteniendo los datos del dataframe
df = pd.read_csv('df_regresion_nolineal_temp.cvs')
#print(df)

x = np.asanyarray(df[['time']])
y = np.asanyarray(df[['temp']])

#Seleccionamos los datos de entrenamiento y generalizacion
x_train, x_test, y_train, y_test = train_test_split(x,y)

#Modelo
#alpha = 0.1
#model = Pipeline([('P',PolynomialFeatures(degree=20)),('S',StandardScaler()),('R',Ridge(alpha))])

model = Pipeline([('P',PolynomialFeatures(degree=20)),('S',StandardScaler()),('R',LinearRegression())])
model.fit(x_train,y_train)

print('Train Score = ', model.score(x_train, y_train))
print('Test Score = ', model.score(x_test, y_test))

#Prediccion

xx = np.linspace(x.min(),x.max(),50).reshape(-1,1)
yy = model.predict(xx)

#Graficando
plt.figure()
plt.grid()
plt.title('Regresion No Lineal')
plt.xlabel('Time')
plt.ylabel('Temp')

plt.plot(x_train, y_train, 'bo')
plt.plot(x_test, y_test, 'ro')
plt.plot(xx, yy, 'y-', lw = 2)
plt.legend(['Dato de entrenamiento','Dato de generalizacion','Predicción'])

plt.show()